doctype html
-
  var messages={
    es:{
        labelChoose:'Paso 1: ',
        buttonChoose:'Elegir',
    },
    en:{
        labelChoose:'Step 1: ',
        buttonChoose:'select file ',
    }
  }[lang||'es'];
html(lang=lang)
  // UTF-8: Sí
  head
    title txt-to-sql
    meta(charset="UTF-8")
    link(rel="icon", href="txt-to-sql.png", type="image/png")
    link(rel="shortcut icon", href="txt-to-sql.png", type="image/png")
    link(rel="apple-touch-icon", href="txt-to-sql.png")
    link(href='txt-to-sql.css', rel='stylesheet')
  body
    a(href="https://github.com/codenautas/txt-to-sql")
      img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67", alt="Fork me on GitHub", data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png")
    div(style={float:'right', height:'300px', margin:'80px 30px'})
      img(src="txt-to-sql.png")
    a(href="https://github.com/codenautas/txt-to-sql/issues")
      img(style="position: absolute; top: 270px; right: 60px; border: 0;", src="new-issue-es.png", alt="New issue")
    h1 txt-to-sql
    div
      label=messages.labelChoose
      input(value=messages.buttonChoose, type='file', id='inputFile')
    div#steps
    pre#log
    pre#errMessage(style={color:'red'})
  script.
    var module = {};
  script(src='require-bro.js')
  script(src='best-globals.js')
  script(src='txt-to-sql.js')  
  script(src='js-to-html.js')  
  script.
    var options = {};
    var messages={
      es:{
          loading:'cargando',
          step2:'Paso 2: ',
          generate:'generar',
          generating:'generando',
          opts:{
            commas:'Alinear commas',
            width:'Ancho máximo',
            format:'Formato campos',
            separator:'Separador',
            outformat:'Formato salida',
            pk:'Incluir PK',
            verbose:'Errores verborrágicos'
          },
          cols:{
            name:'Nombre',
            type:'Tipo',
            pk:'En PK',
            nuls:'NULL\'s',
            len:'Longitud',
            scale:'Escala',
            cn:'NotaciónCientífica'
          },
          step3:'Paso 3: ',
          download:'descargar',
      },
      en:{
          loading:'loading',
          step2:'Step 2: ',
          generate:'generate',
          generating:'generating',
          opts:{
            commas:'Align commas',
            width:'Max width',
            format:'Field format',
            separator:'Field separator',
            outformat:'Output format',
            pk:'Include PK',
            verbose:'Verbose errors'
          },
          cols:{
            name:'Name',
            type:'Type',
            pk:'In PK',
            nuls:'NULL\'s',
            len:'Length',
            scale:'Scale',
            cn:'CientificNotation'
          },
          step3:'Step 3: ',
          download:'download',
      }
    }[window.lang||'es'];
    function resetPage() {
        options = {
            verboseErrors:true,
            columnAlignedCommas:true
        };
        while(steps.lastChild) { steps.removeChild(steps.lastChild); }
        log.textContent="";
        errMessage.textContent="";
    }
    function processFile(file, messageText) {
        var tableName=file.name.replace(/^(.*[\\/])?([^\\/\.]+)\.[^\\/\.]+$/,'$2');
        log.textContent+="\n"+messageText+' '+file.name;
        var promise = new Promise(function(resolve, reject){
            try{
                var reader = new FileReader();
                reader.onload = function(event){
                    resolve(event.target.result);
                };
                reader.readAsText(file);
            }catch(err){
                reject(err);
            }
        });
        return promise.then(function(txt){
            return {tableName:tableName, txt:txt, opts:options};
        }).catch(function(err){
            errMessage.textContent=err.message;
        });
    }
    var html = jsToHtml.html;
    function addStep(labelText, elements) {
        steps.appendChild(html.div([html.label(labelText)].concat(elements)).create());
    }
    function createInput(name, value, width) {
        var attrs = {name:name};
        if(typeof(value)==='boolean') {
            attrs.type = 'checkbox',
            attrs.checked = value;
        } else {
            attrs.type = 'text',
            attrs.value = value;
            attrs.size=width || 5;
        }
        return html.input(attrs);
    }
    function createOption(label, name, value, width) {
        return html.tr([
            html.td([html.label(label)]),
            html.td([createInput(name, value, width)])            
        ]).create();
    }
    function handleGenerate(event){
        var file = event.target.file; // FileList object
        var tableName;
        processFile(file, messages.generating).then(function(param) {
            tableName=param.tableName;
            return generateScripts(param);
        }).then(function(generated) {
            if(generated.errors) { throw new Error(generated.errors.join('\n')); }
            var blob = new Blob(generated.sqls.map(function(sql) { return sql+'\n'; }), {type: 'text/plain'})
            var url = URL.createObjectURL(blob); // "data:Application/octet-stream;base64," + blob.;
            var link = html.a({href:url}, messages.download).create();
            link.setAttribute("download", tableName+".sql");
            addStep(messages.step3, [link]);
        }).catch(function(err){
            errMessage.textContent=err.message;
        });
    }
    function handlePrepare(event){
        var files = event.target.files; // FileList object
        resetPage();
        Array.prototype.forEach.call(files, function(file){
            processFile(file, messages.loading).then(function(param) {
                return prepare(param);
            }).then(function(prepared) {
                if(prepared.errors) { throw new Error(prepared.errors.join('\n')); }
                options = prepared.opts;
                var button = html.input({type:'button', value:messages.generate}).create();
                button.file = file;
                button.addEventListener('click', handleGenerate, false);
                var tblOpts = html.table({class:'inner'},[
                    html.th({colspan:2},[html.td("Options")]).create(),
                    createOption(messages.opts.commas, 'columnAlignedCommas', options.columnAlignedCommas, 1),
                    createOption(messages.opts.width, 'columnAlignedMaxWidth', options.columnAlignedMaxWidth, 1),
                    createOption(messages.opts.format, 'columnNamesFormat', options.columnNamesFormat, 15),
                    createOption(messages.opts.separator, 'separator', options.separator, 1),
                    createOption(messages.opts.outformat, 'outputFormat', options.outputFormat, 10),
                    createOption(messages.opts.pk, 'includePrimaryKey', options.includePrimaryKey, 1),
                    createOption(messages.opts.verbose, 'verboseErrors', options.verboseErrors, 1)
                ]).create();
                console.log("column", prepared.columns);
                var fields = prepared.columns.map(function(column) {
                    var hcn = column.hasCientificNotation!==null && column.hasCientificNotation;
                    return html.tr([
                                html.td([createInput('name', column.name.substr(1,column.name.length-2), 15)]),
                                html.td([createInput('type', column.type, 10)]),
                                html.td([createInput('inPrimaryKey', column.inPrimaryKey)]),
                                html.td([createInput('hasNullValues', column.hasNullValues)]),
                                html.td([createInput('maxLength', column.maxLength)]),
                                html.td([createInput('maxScale', column.maxScale || 0)]),
                                html.td([createInput('hasCientificNotation', hcn)]),
                           ]);
                });
                fields.unshift(html.tr([
                                        html.td(messages.cols.name),
                                        html.td(messages.cols.type),
                                        html.td(messages.cols.pk),
                                        html.td(messages.cols.nuls),
                                        html.td(messages.cols.len),
                                        html.td(messages.cols.scale),
                                        html.td(messages.cols.cn)
                               ]));
                fields.unshift(html.th({colspan:7}, [html.td("Fields")]));
                console.log("fields", fields)
                var tblFields = html.table({class:'inner'}, fields).create();
                addStep(messages.step2, [html.table({class:'outer'}, [
                                            html.tr([
                                                html.td([tblOpts]),
                                                html.td([tblFields])
                                            ]),
                                            button
                                        ]).create()]);
            }).catch(function(err){
                errMessage.textContent=err.message;
            });
        });
    }
    document.getElementById('inputFile').addEventListener('change', handlePrepare, false);
    // para el F5 post "npm run web"
    resetPage();
    inputFile.value = "";
