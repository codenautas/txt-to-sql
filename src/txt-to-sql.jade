doctype html
-
  var messages={
    es:{
        labelChoose:'Paso 1: ',
        buttonChoose:'Elegir',
        labelSeparator:'Separador: ',
        separatorTitle:'Definir separador, si vacío, auto-detecta'
    },
    en:{
        labelChoose:'Step 1: ',
        labelSeparator:'Separator: ',
        buttonChoose:'select file ',
        separatorTitle:'Define separator, if empty, auto-detects it'
    }
  }[lang||'es'];
html(lang=lang)
  // UTF-8: Sí
  head
    title txt-to-sql
    meta(charset="UTF-8")
    link(rel="icon", href="txt-to-sql.png", type="image/png")
    link(rel="shortcut icon", href="txt-to-sql.png", type="image/png")
    link(rel="apple-touch-icon", href="txt-to-sql.png")
    link(href='txt-to-sql.css', rel='stylesheet')
  body
    a(href="https://github.com/codenautas/txt-to-sql")
      img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67", alt="Fork me on GitHub", data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png")
    div(style={float:'right', height:'300px', margin:'80px 30px'})
      img(src="txt-to-sql.png")
    a(href="https://github.com/codenautas/txt-to-sql/issues")
      img(style="position: absolute; top: 270px; right: 60px; border: 0;", src="new-issue-es.png", alt="New issue")
    h1 txt-to-sql
    div
      label=messages.labelChooselabel=messages.labelChoose
      label=messages.labelSeparator
      input(type='text', id='inputSeparator' size=1, title=messages.separatorTitle)
      span &nbsp;
      input(value=messages.buttonChoose, type='file', id='inputFile')
    div#steps
    pre#log
    pre#errMessage(style={color:'red'})
  script.
    /* space */
    var module = {};
    /* space */
    function getID(id) { return document.getElementById(id); }
  script(src='buffer.js')
  script(src='iconv-lite.js')
  script.
    /* space */
    var Buffer = require('buffer').Buffer;
    var iconv = require('iconv-lite');
    /* space */
    delete window.require;
    /* space */
  script(src='require-bro.js')
  script.
    /* space */
    window.require.definedModules['iconv-lite'] = iconv;
    /* space */
  script(src='best-globals.js')
  script(src='txt-to-sql.js')
  script(src='js-to-html.js')
  script.
    /* space */
    var userOptions = {};
    var preparedColumns = {};
    var messages={
      es:{
          loading:'cargando',
          step2:'Paso 2: ',
          generate:'generar',
          generating:'generando',
          opts:{
            commas:'Alinear commas',
            width:'Ancho máximo',
            format:'Formato campos',
            separator:'Separador',
            outformat:'Formato salida',
            pk:'Incluir PK',
            verbose:'Errores verborrágicos',
            inputEncoding:'Formato de entrada',
            outputEncoding:'Formato de salida',
          },
          cols:{
            name:'Nombre',
            type:'Tipo',
            pk:'En PK',
            nuls:'NULLs',
            len:'Longitud',
            scale:'Escala',
            cn:'NotaciónCientífica'
          },
          step3:'Paso 3: ',
          download:'descargar',
      },
      en:{
          loading:'loading',
          step2:'Step 2: ',
          generate:'generate',
          generating:'generating',
          opts:{
            commas:'Align commas',
            width:'Max width',
            format:'Field format',
            separator:'Field separator',
            outformat:'Output format',
            pk:'Include PK',
            verbose:'Verbose errors',
            inputEncoding:'Input encoding',
            outputEncoding:'Output encoding',
          },
          cols:{
            name:'Name',
            type:'Type',
            pk:'In PK',
            nuls:'NULLs',
            len:'Length',
            scale:'Scale',
            cn:'CientificNotation'
          },
          step3:'Step 3: ',
          download:'download',
      }
    }[window.lang||'es'];
    function resetPage() {
        userOptions = {
            verboseErrors:true,
            columnAlignedCommas:true
        };
        defSeparator = getID('inputSeparator');
        if(defSeparator && defSeparator.value !=='') {
            userOptions.separator = defSeparator.value;
        }
        while(steps.lastChild) { steps.removeChild(steps.lastChild); }
        log.textContent="";
        errMessage.textContent="";
    }
    function processFile(file, messageText) {
        var tableName=file.name.replace(/^(.*[\\/])?([^\\/\.]+)\.[^\\/\.]+$/,'$2');
        // log.textContent+="\n"+messageText+' '+file.name;
        log.textContent=messageText+' '+file.name;
        var promise = new Promise(function(resolve, reject){
            try{
                var reader = new FileReader();
                reader.onload = function(event){
                    resolve(event.target.result);
                };
                reader.readAsArrayBuffer(file);
            }catch(err){
                reject(err);
            }
        });
        return promise.then(function(arrayBuffer){
            return new Buffer(arrayBuffer);
        }).then(function(buf){
            return {tableName:tableName, rawTable:buf, opts:userOptions};
        }).catch(function(err){
            errMessage.textContent=err.message;
        });
    }
    var html = jsToHtml.html;
    function addStep(labelText, elements) {
        var existe = getID(labelText);
        if(existe) { steps.removeChild(existe); }
        steps.appendChild(html.div({id:labelText}, [html.label(labelText)].concat(elements)).create());
    }
    function createInput(name, value, width, id) {
        var attrs = {name:name};
        if(id) { attrs.id = id; }
        if(typeof(value)==='boolean') {
            attrs.type = 'checkbox',
            attrs.checked = value;
        } else {
            attrs.type = 'text',
            attrs.value = value;
            attrs.size=width || 5;
        }
        return html.input(attrs);
    }
    function createOption(label, name, value, width, id) {
        return html.tr([
            html.td([html.label(label)]),
            html.td([createInput(name, value, width, id || name)])            
        ]).create();
    }
    function handleGenerate(event){
        // modify userOptions according to prepare()
        var addColumns = false;
        if(! userOptions.columns) {
            userOptions.columns = [];
            addColumns = true;
        }
        userOptions.columnAlignedCommas   = getID('columnAlignedCommas').checked;
        userOptions.columnAlignedMaxWidth = getID('columnAlignedMaxWidth').value;
        userOptions.columnNamesFormat     = getID('columnNamesFormat').value;
        userOptions.separator             = getID('separator').value;
        userOptions.outputEngine          = getID('outputEngine').value;
        userOptions.includePrimaryKey     = getID('includePrimaryKey').checked;
        userOptions.verboseErrors         = getID('verboseErrors').checked;
        userOptions.inputEncoding         = getID('inputEncoding').value;
        userOptions.outputEncoding        = getID('outputEncoding').value;
        
        preparedColumns.forEach(function(column, index) {
            var colName = getID('col_name_'+index);
            var colType = getID('col_type_'+index);
            var colPK = getID('col_pk_'+index);
            var colNulls = getID('col_nulls_'+index);
            var colLen = getID('col_len_'+index);
            var colScale = getID('col_scale_'+index);
            var colCN = getID('col_cn_'+index);
            if(addColumns) {
                userOptions.columns.push({
                    name:colName.value,
                    type:colType.value,
                    inPrimaryKey:colPK.checked,
                    hasNullValues:colNulls.checked,
                    maxLength:colLen.value,
                    maxScale:colScale.value,
                    hasCientificNotation:colCN.checked
                });
            } else {
                userOptions.columns[index].name = colName.value;
                userOptions.columns[index].type = colType.value;
                userOptions.columns[index].inPrimaryKey = colPK.checked;
                userOptions.columns[index].hasNullValues = colNulls.checked;
                userOptions.columns[index].maxLength = colLen.value;
                userOptions.columns[index].maxScale = colScale.value;
                userOptions.columns[index].hasCientificNotation = colCN.checked;
            }
        });
        
        // Process files
        var file = event.target.file; // FileList object
        var tableName;
        processFile(file, messages.generating).then(function(param) {
            tableName=param.tableName;
            return generateScripts(param);
        }).then(function(generated) {
            if(generated.errors) { throw new Error(generated.errors.join('\n')); }
            var blob = new Blob([generated.rawSql.buffer], {type: 'text/plain'})
            var url = URL.createObjectURL(blob); // "data:Application/octet-stream;base64," + blob.;
            var link = html.a({href:url}, messages.download).create();
            link.setAttribute("download", tableName+".sql");
            addStep(messages.step3, [link]);
        }).catch(function(err){
            errMessage.textContent=err.message;
        });
    }
    function handlePrepare(event){
        var files = getID('inputFile').files;
        //var files = event.target.files; // FileList object
        resetPage();
        Array.prototype.forEach.call(files, function(file){
            console.log('file: '+file.name)
            processFile(file, messages.loading).then(function(param) {
                return prepare(param);
            }).then(function(prepared) {
                if(prepared.errors) { throw new Error(prepared.errors.join('\n')); }
                preparedColumns = prepared.columns;
                var butGenerate = html.input({type:'button', value:messages.generate}).create();
                butGenerate.file = file;
                butGenerate.addEventListener('click', handleGenerate, false);
                var tblOpts = html.table({class:'inner'},[
                    html.th({colspan:2},[html.td("Options")]).create(),
                    createOption(messages.opts.commas, 'columnAlignedCommas', prepared.opts.columnAlignedCommas, 1),
                    createOption(messages.opts.width, 'columnAlignedMaxWidth', prepared.opts.columnAlignedMaxWidth, 1),
                    createOption(messages.opts.format, 'columnNamesFormat', prepared.opts.columnNamesFormat, 15),
                    createOption(messages.opts.separator, 'separator', prepared.opts.separator, 1),
                    createOption(messages.opts.outformat, 'outputEngine', prepared.opts.outputEngine, 10),
                    createOption(messages.opts.pk, 'includePrimaryKey', prepared.opts.includePrimaryKey, 1),
                    createOption(messages.opts.verbose, 'verboseErrors', prepared.opts.verboseErrors, 1),
                    createOption(messages.opts.inputEncoding, 'inputEncoding', prepared.opts.inputEncoding, 7),
                    createOption(messages.opts.outputEncoding, 'outputEncoding', prepared.opts.outputEncoding, 7),
                ]).create();
                var fields = prepared.columns.map(function(column, index) {
                    var ipk = column.inPrimaryKey!==null && column.inPrimaryKey;
                    var hnv = column.hasNullValues!==null && column.hasNullValues;
                    var hcn = column.hasCientificNotation!==null && column.hasCientificNotation;
                    return html.tr([
                                html.td([createInput('name', column.name.substr(1,column.name.length-2), 15, 'col_name_'+index)]),
                                html.td([createInput('type', column.type, 10, 'col_type_'+index)]),
                                html.td([createInput('inPrimaryKey', ipk, 0, 'col_pk_'+index)]),
                                html.td([createInput('hasNullValues', hnv, 0, 'col_nulls_'+index)]),
                                html.td([createInput('maxLength', column.maxLength, 0, 'col_len_'+index)]),
                                html.td([createInput('maxScale', column.maxScale || 0, 0, 'col_scale_'+index)]),
                                html.td([createInput('hasCientificNotation', hcn, 0, 'col_cn_'+index)])
                           ]);
                });
                fields.unshift(html.tr([
                                        html.td(messages.cols.name),
                                        html.td(messages.cols.type),
                                        html.td(messages.cols.pk),
                                        html.td(messages.cols.nuls),
                                        html.td(messages.cols.len),
                                        html.td(messages.cols.scale),
                                        html.td(messages.cols.cn)
                               ]));
                fields.unshift(html.th({colspan:7}, [html.td("Fields")]));
                var tblFields = html.table({class:'inner'}, fields).create();
                addStep(messages.step2, [html.table({class:'outer'}, [
                                            html.tr([
                                                html.td([tblOpts]),
                                                html.td([tblFields])
                                            ]),
                                            butGenerate
                                        ]).create()]);
               errMessage.textContent=""; // if all goes ok, clear' em
            }).catch(function(err){
                errMessage.textContent=err.message;
            });
        });
    }
    getID('inputFile').addEventListener('change', handlePrepare, false);
    getID('inputSeparator').addEventListener('change', handlePrepare, false);
    // para el F5 post "npm run web"
    resetPage();
    inputFile.value = "";
