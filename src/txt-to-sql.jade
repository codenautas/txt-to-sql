doctype html
-
  var messages={
    es:{
        labelChoose:'Paso 1: ',
        buttonChoose:'Elegir',
    },
    en:{
        labelChoose:'Step 1: ',
        buttonChoose:'select file ',
    }
  }[lang||'es'];
html(lang=lang)
  // UTF-8: SÃ­
  head
    title txt-to-sql
    meta(charset="UTF-8")
    link(rel="icon", href="txt-to-sql.png", type="image/png")
    link(rel="shortcut icon", href="txt-to-sql.png", type="image/png")
    link(rel="apple-touch-icon", href="txt-to-sql.png")
  body
    a(href="https://github.com/codenautas/txt-to-sql")
      img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67", alt="Fork me on GitHub", data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png")
    a(href="https://github.com/codenautas/txt-to-sql/issues")
      img(style="position: absolute; top: 100px; right: 100px; border: 0;", src="new-issue-es.png", alt="New issue")
    div(style={float:'left', height:'300px', margin:'0px 30px'})
      img(src="txt-to-sql.png")
    h1 txt-to-sql
    div
      label=messages.labelChoose
      input(value=messages.buttonChoose, type='file', id='inputFile')
    pre#log
    div#result
    pre#errMessage(style={color:'red'})
  script.
    var module = {};
  script(src='require-bro.js')
  script(src="best-globals.js")
  script(src="txt-to-sql.js")
  script.
    var messages={
      es:{
          loading:'cargando',
          step2:'Paso 2 ',
          download:'descargar',
      },
      en:{
          loading:'loading',
          step2:'Step 2 ',
          download:'download',
      }
    }[window.lang||'es'];
    function clearOutput() {
        while (result.firstChild) { result.removeChild(result.firstChild); }
        log.textContent="";
        errMessage.textContent="";
    }
    function handleFileSelect(event){
        var files = event.target.files; // FileList object
        clearOutput();
        Array.prototype.forEach.call(files, function(file){
            var tableName=file.name.replace(/^(.*[\\/])?([^\\/\.]+)\.[^\\/\.]+$/,'$2');
            log.textContent+="\n"+messages.loading+' '+file.name;
            var promise = new Promise(function(resolve, reject){
                try{
                    var reader = new FileReader();
                    reader.onload = function(event){
                        resolve(event.target.result);
                    };
                    reader.readAsText(file);
                }catch(err){
                    reject(err);
                }
            });
            return promise.then(function(txt){
                return generateScripts({txt:txt, tableName:tableName, opts:{verboseErrors:true,columnAlignedCommas:true}});
            }).then(function(generated){
                if(generated.errors) { throw new Error(generated.errors.join('\n')); }
                var link = document.createElement('a');
                link.textContent = messages.download;
                var blob = new Blob(generated.sqls.map(function(sql) { return sql+'\n'; }), {type: 'text/plain'})
                link.setAttribute("download", tableName+".sql");    
                var url = URL.createObjectURL(blob); // "data:Application/octet-stream;base64," + blob.;
                link.href=url;
                result.textContent=messages.step2;
                result.appendChild(link);
            }).catch(function(err){
                errMessage.textContent=err.message;
            });
        });
    }
    document.getElementById('inputFile').addEventListener('change', handleFileSelect, false);
    clearOutput();
    inputFile.value = "";